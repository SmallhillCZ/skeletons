import { INestApplication } from "@nestjs/common";
import { DocumentBuilder, OpenAPIObject, SwaggerModule } from "@nestjs/swagger";
import { Config } from "./config";

// uncomment if using SWC compiler
// import metadata from "./metadata";

const ROOT_TAG = "Root";

export function generateOpenAPI(app: INestApplication, config: Config) {
	const builder = new DocumentBuilder()
		.setTitle(config.app.name)
		.setVersion(config.app.version)
		.addServer(config.app.baseUrl)
		.build();

	// uncomment if using SWC compiler
	// await SwaggerModule.loadPluginMetadata(metadata);

	const document = SwaggerModule.createDocument(app, builder, {
		operationIdFactory: (controllerKey: string, methodKey: string) => `${controllerKey}_${methodKey}`,
	});

	// SwaggerModules does not add the OpenAPI paths for the paths generated by itself, so we need to add them manually
	addOpenapiPaths(document, config);

	return document;
}

export function registerOpenAPI(path: string, app: INestApplication, config: Config) {
	const openapiDocument = generateOpenAPI(app, config);

	function openapiTagSorter(a: string, b: string) {
		if (a === ROOT_TAG) return -1;
		if (b === ROOT_TAG) return 1;
		return a.localeCompare(b);
	}

	SwaggerModule.setup(path, app, openapiDocument, {
		swaggerOptions: {
			tagsSorter: openapiTagSorter,
			operationsSorter: "alpha",
		},
	});
}

/**
 * Add OpenAPI paths to the document
 */
function addOpenapiPaths(document: OpenAPIObject, config: Config) {
	let prefix = config.server.globalPrefix ?? "";

	if (!prefix.startsWith("/")) prefix = "/" + prefix;
	if (!prefix.endsWith("/") && prefix !== "/") prefix = prefix + "/";

	const paths = {
		[prefix + "openapi"]: {
			get: {
				tags: [ROOT_TAG],
				summary: "This SwaggerUI page",
				operationId: "viewSwaggerUI",
				parameters: [],
				responses: {
					"200": {
						description: "OpenAPI document",
						content: {
							"application/html": {
								schema: {
									type: "string",
								},
							},
						},
					},
				},
			},
		},
		[prefix + "openapi-json"]: {
			get: {
				tags: [ROOT_TAG],
				summary: "The OpenAPI document in JSON",
				operationId: "getOpenAPIJSON",
				parameters: [],
				responses: {
					"200": {
						description: "OpenAPI document",
						content: {
							"application/json": {
								schema: {
									type: "string",
								},
							},
						},
					},
				},
			},
		},
		[prefix + "openapi-yaml"]: {
			get: {
				tags: [ROOT_TAG],
				summary: "The OpenAPI document in YAML",
				operationId: "getOpenAPIYAML",
				parameters: [],
				responses: {
					"200": {
						description: "OpenAPI document",
						content: {
							"application/yaml": {
								schema: {
									type: "string",
								},
							},
						},
					},
				},
			},
		},
	};
	Object.assign(document.paths, paths);
}
